{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://wang-m-hw2-bundle/./src/enums/audio-defaults.enum.ts","webpack://wang-m-hw2-bundle/./src/audio.ts","webpack://wang-m-hw2-bundle/./src/utils.ts","webpack://wang-m-hw2-bundle/./src/classes/CircleSprite.ts","webpack://wang-m-hw2-bundle/./src/canvas.ts","webpack://wang-m-hw2-bundle/./src/main.ts","webpack://wang-m-hw2-bundle/./src/loader.ts"],"sourcesContent":["enum DEFAULTS {\r\n    gain = 0.5,\r\n    numSamples = 256\r\n}\r\n\r\nexport {DEFAULTS};","import {DEFAULTS} from './enums/audio-defaults.enum'\r\n\r\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx:AudioContext;\r\n\r\nlet highshelf = false;\r\nlet lowshelf = false;\r\nlet biquadFilter;\r\nlet lowShelfBiquadFilter;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element:HTMLAudioElement, sourceNode: MediaElementAudioSourceNode, analyserNode: AnalyserNode, gainNode: GainNode;\r\n\r\n// 3 - here we are faking an enumeration\r\n// const DEFAULTS = Object.freeze({\r\n//     gain: .5,\r\n//     numSamples: 256\r\n// })\r\n\r\n// 4 - create a new array of 8-bit integers (0-255)\r\n// this is a typed array to hold the audio frequency data\r\n// let audioData = new Uint8Array(DEFAULTS.numSamples/2)//delete\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebaudio = (filePath: string) => {\r\n// 1 - The || is because WebAudio has not been standardized across browsers yet\r\n     const AudioContext = window.AudioContext;\r\n     audioCtx = new AudioContext();\r\n\r\n// 2 - this creates an <audio> element\r\n    element = new Audio();\r\n\r\n// 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n// 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    biquadFilter = audioCtx.createBiquadFilter();//ADDED STUFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\r\n\tbiquadFilter.type = \"highshelf\";\r\n\t// biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\t// biquadFilter.gain.setValueAtTime(20,audioCtx.currentTime);\r\n\tlowShelfBiquadFilter = audioCtx.createBiquadFilter();\r\n\tlowShelfBiquadFilter.type = \"lowshelf\";\r\n\r\n// 5 - create an analyser node\r\n    analyserNode = audioCtx.createAnalyser();// note the UK spelling of \"Analyser\"\r\n    \r\n/*\r\n// 6\r\nWe will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\nacross the sound spectrum.\r\n\r\nIf DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\nthe third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\nthe amplitude of that frequency.\r\n*/ \r\n\r\n// fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n// 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n// 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(biquadFilter);\r\n\tbiquadFilter.connect(lowShelfBiquadFilter);\r\n\tlowShelfBiquadFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\nconst toggleHighshelf = () => {\r\n    const highshelf = document.querySelector('#cb-highshelf') as HTMLInputElement;\r\n\r\n    if(highshelf.checked){\r\n        biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime); // we created the `biquadFilter` (i.e. \"treble\") node last time\r\n        biquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);\r\n    }else{\r\n        biquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\nconst toggleLowshelf = () => {\r\n    const lowshelf = document.querySelector('#cb-lowshelf') as HTMLInputElement;\r\n    if(lowshelf.checked){\r\n        lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n        lowShelfBiquadFilter.gain.setValueAtTime(15, audioCtx.currentTime);\r\n    }else{\r\n        lowShelfBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\nconst loadSoundFile = (filePath: string) => {\r\n    element.src = filePath;\r\n}\r\n\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n}\r\n\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n}\r\n\r\nconst setVolume = (value: string | number) => {\r\n    value = Number(value);// make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n}\r\n\r\n\r\n\r\nexport{audioCtx, setupWebaudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, analyserNode, toggleHighshelf, toggleLowshelf, highshelf, lowshelf};\r\n","import {ColorStop} from './interfaces/colorStop.interface'\r\n\r\n\r\nconst makeColor = (red: number, green: number, blue: number, alpha = 1) => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n  };\r\n  \r\n  const getRandom = (min: number, max: number) => {\r\n    return Math.random() * (max - min) + min;\r\n  };\r\n  \r\n  const getRandomColor = () => {\r\n    const floor = 35; // so that colors are not too bright or too dark \r\n    const getByte = () => getRandom(floor,255-floor);\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n  };\r\n  \r\n  const getLinearGradient = (ctx: CanvasRenderingContext2D,startX: number,startY: number,endX: number,endY: number,colorStops: any) => {//ColorStops\r\n    let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n    for(let stop of colorStops){\r\n      lg.addColorStop(stop.percent,stop.color);\r\n    }\r\n    return lg;\r\n  };\r\n  \r\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\n  const goFullscreen = (element: { requestFullscreen: () => void; mozRequestFullscreen: () => void; mozRequestFullScreen: () => void; webkitRequestFullscreen: () => void; }) => {\r\n    if (element.requestFullscreen) {\r\n      element.requestFullscreen();\r\n    } else if (element.mozRequestFullscreen) {\r\n      element.mozRequestFullscreen();\r\n    } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n      element.mozRequestFullScreen();\r\n    } else if (element.webkitRequestFullscreen) {\r\n      element.webkitRequestFullscreen();\r\n    }\r\n    // .. and do nothing if the method is not supported\r\n  };\r\n  \r\n  export {makeColor, getRandom, getRandomColor, getLinearGradient, goFullscreen};","import * as utils from '../utils';\r\nimport * as canvas from '../canvas';\r\n\r\nexport default class CircleSprites{\r\n    static type = \"arc\"; // demoing a static (class) variable here\r\n\r\n    private x: number;\r\n    private y: number;\r\n    private range: number;\r\n    private radius: number;\r\n    private startAngle: number;\r\n    private endAngle: number;\r\n    private xDraw: number;\r\n    private yDraw: number;\r\n    private color: any;\r\n    \r\n\r\n\r\n\r\n\r\n    constructor(x: number, y: number, range: number){\r\n        this.x = x;\r\n        this.y = y;\r\n        this.range = range;\r\n        //this.color = `rgb(${0}, ${0-128}, ${255-0})`;;\r\n        this.radius = utils.getRandom(2, 6);\r\n        this.startAngle = 0;\r\n        this.endAngle = Math.PI * 2;\r\n    }\r\n    \r\n    update(){\r\n        this.xDraw = utils.getRandom(this.x-this.range/2, this.x+this.range/2);\r\n        this.yDraw = utils.getRandom(this.y-this.range/2, this.y+this.range/2);\r\n        this.radius = utils.getRandom(2, 6);\r\n\r\n    }\r\n    \r\n    draw(ctx: CanvasRenderingContext2D){\r\n        canvas.drawArc(ctx, this.xDraw, this.yDraw, this.radius, this.color, this.startAngle, String(this.endAngle));\r\n\r\n    }\r\n}\r\n\r\n//export {CircleSprites};","/*\r\n\tThe purpose of this file is to take in the analyser node and a <canvas> element: \r\n\t  - the module will create a drawing context that points at the <canvas> \r\n\t  - it will store the reference to the analyser node\r\n\t  - in draw(), it will loop through the data in the analyser node\r\n\t  - and then draw something representative on the canvas\r\n\t  - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\nimport * as utils from './utils';\r\nimport * as main from './main';\r\nimport * as audio from './audio';\r\nimport CircleSprites from './classes/CircleSprite'\r\nimport {DrawParams} from './interfaces/drawParams.interface'\r\n\r\nlet ctx: CanvasRenderingContext2D, canvasWidth: number,canvasHeight: number,/*gradient,*/analyserNode: AnalyserNode,audioData;\r\n\r\n\r\nconst BAR_WIDTH = 18;\r\nconst MAX_BAR_HEIGHT = 60;\r\nconst PADDING = 4;\r\nlet MIDDLE_Y: number;\r\n\r\nconst div = document.querySelector('controls')\r\n\r\nconst setupCanvas = (canvasElement: HTMLCanvasElement,analyserNodeRef: AnalyserNode) => {\r\n\t// create drawing context\r\n\tctx = canvasElement.getContext(\"2d\");\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\r\n    MIDDLE_Y = canvasHeight/2;\r\n\r\n\t// create a gradient that runs top to bottom\r\n\t//gradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#489EDB\"},{percent:.25,color:\"#2DCBDC\"},{percent:.5,color:\"#8048DB\"},{percent:.75,color:\"#4870DB\"},{percent:1,color:\"#25DBA1\"}]);\r\n\t// keep a reference to the analyser node\r\n\tanalyserNode = analyserNodeRef;\r\n\t// this is the array where the analyser data will be stored\r\n\taudioData = new Uint8Array(analyserNode.fftSize/2);\r\n}\r\n\r\n\r\n\r\nconst drawArc = (ctx: CanvasRenderingContext2D,x: number,y: number,radius: number,fillStyle: any,lineWidth: number,strokeStyle: string | CanvasGradient | CanvasPattern,startAngle = 0,endAngle = Math.PI * 2) => {\r\n    ctx.save();\r\n    //ctx.fillStyle = fillStyle;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, radius, startAngle, endAngle);\r\n    ctx.fill();\r\n    if(lineWidth >0){\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeStyle = strokeStyle;\r\n        ctx.stroke();\r\n    }\r\n    ctx.closePath();\r\n    ctx.restore();\r\n}\r\n\r\nconst circSprite = new CircleSprites(50, 50, 50);\r\nconst circSprite2 = new CircleSprites(800-50, 50, 50);\r\n    //console.log(\"circles generated\");\r\n\r\nconst draw = (params:DrawParams) => {\r\n  // 1 - populate the audioData array with the frequency data from the analyserNode//\r\n\t// notice these arrays are passed \"by reference\" \r\n\tanalyserNode.getByteFrequencyData(audioData);\r\n\t// OR\r\n\t//analyserNode.getByteTimeDomainData(audioData); // waveform data\r\n\t \r\n\t// 2 - draw background\r\n\tctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0,0,canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    \r\n\t\r\n    if(main.visualization){\r\n        //div.style.visibility = 'visible';\r\n        // 3 - draw gradient\r\n        // if(params.showGradient){\r\n        //     // ctx.save();\r\n        //     // ctx.fillStyle = gradient;\r\n        //     // ctx.globalApha = .3;\r\n        //     // ctx.fillRect(0,0,canvasWidth, canvasHeight);\r\n        //     // ctx.restore();\r\n        // }\r\n        // 4 - draw bars\r\n        if(params.showBars){\r\n            let barSpacing = 4;\r\n            let margin = 5;\r\n            let screenWidthForBars = canvasWidth - (audioData.length*barSpacing) - margin * 2;\r\n            let barWidth = screenWidthForBars / audioData.length;\r\n            let barHeight = 200;\r\n            let topSpacing = 100;\r\n\r\n            ctx.save()\r\n            \r\n            ctx.strokeStyle = `rgba(0, 0, 0, 0, .5)`;\r\n            //loop through data and draw\r\n            for(let i = 0; i<audioData.length; i++){\r\n\r\n                ctx.fillStyle = utils.makeColor(156-audioData[i], 256-Math.round(audioData[i]/2), 256-audioData[i], .5);\r\n                ctx.fillRect(margin + i * (barWidth + barSpacing), topSpacing + 256-audioData[i], barWidth, barHeight);\r\n                ctx.strokeRect(margin + i * (barWidth + barSpacing), topSpacing + 256-audioData[i], barWidth, barHeight);\r\n            }\r\n            ctx.restore();\r\n        }\r\n        // 5 - draw circles\r\n        if(params.showCircles){\r\n            let maxRadius = canvasHeight/4;\r\n            ctx.save()\r\n            ctx.globalAlpha = .5;\r\n\r\n            for(let i = 0; i<audioData.length; i++){\r\n                //red  \r\n                let percent = audioData[i] / 255;\r\n                ctx.strokeStyle = \"teal\";\r\n\r\n                let circleRadius = percent * maxRadius;\r\n                ctx.beginPath();\r\n                ctx.strokeStyle = utils.makeColor(124, 223, circleRadius*4, .34 - percent/3.0);\r\n                ctx.arc(canvasWidth/2, canvasHeight/2, circleRadius, 0, 2*Math.PI, false);\r\n                //ctx.fill();\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n                //blue, bigger, transparent\r\n                ctx.beginPath();\r\n                ctx.fillStyle = utils.makeColor(87, 41, circleRadius*5 , .1 - percent/10.0);\r\n                ctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * 1.5, 0, 2*Math.PI, false);\r\n                //ctx.fill();\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n                //yelow smaller\r\n                ctx.beginPath();\r\n                ctx.fillStyle = utils.makeColor(13, 156, circleRadius*.5, .5 - percent/5.0);\r\n                ctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * .50, 0, 2*Math.PI, false);\r\n                //ctx.fill();\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n            }\r\n            ctx.restore();\r\n        }\r\n\r\n        // 6 - bitmap manipulation\r\n        // TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n        // regardless of whether or not we are applying a pixel effect\r\n        // At some point, refactor this code so that we are looping though the image data only if\r\n        // it is necessary\r\n\r\n        // A) grab all of the pixels on the canvas and put them in the `data` array\r\n        // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n        // the variable `data` below is a reference to that array \r\n        let imageData = ctx.getImageData(0,0,canvasWidth, canvasHeight);\r\n        let data = imageData.data;\r\n        let length = data.length;\r\n        let width = imageData.width;\r\n        // B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n        for(let i = 0; i < length; i += 4){\r\n\r\n        \r\n            // C) randomly change every 20th pixel to red\r\n            if(params.showNoise && Math.random() < .05){\r\n                // data[i] is the red channel\r\n                // data[i+1] is the green channel\r\n                // data[i+2] is the blue channel\r\n                // data[i+3] is the alpha channel\r\n                data[i] = data[i+1] = data[i+2] = 0;// zero out the red and green and blue channels\r\n                data[i+2] = 255// make the red channel 100% red\r\n            } // end if\r\n\r\n            //invert\r\n            if(params.showInvert){\r\n                let red = data[i], green = data[i+1], blue = data[i+2];\r\n                data[i] = 255-red;\r\n                data[i] = 255-green;\r\n                data[i] = 255-blue;\r\n                //leaving alpha alone\r\n            }\r\n        } // end for\r\n\r\n\r\n        if(params.showEmboss){\r\n            for(let i = 0; i<length; i++){\r\n                if(i%4 ==3) continue;//skip alpha\r\n                data[i] = 127 + 2*data[i] - data[i+4] - data[i+width*4];\r\n            }\r\n        }\r\n\r\n        // D) copy image data back to canvas\r\n        ctx.putImageData(imageData, 0, 0);\r\n\r\n        for(let b of audioData){\r\n            ctx.save();\r\n            ctx.fillStyle = `rgb(${b/12}, ${82-b}, ${b})`;\r\n            circSprite.update();\r\n            circSprite.draw(ctx);\r\n            circSprite2.update();\r\n            circSprite2.draw(ctx);\r\n            ctx.restore();\r\n        }\r\n    }\r\n    else{\r\n        //div.style.visibility = 'hidden';\r\n\r\n        ctx.fillStyle = \"rgba(0,0,0,.1)\";\r\n\t\tctx.fillRect(0,0,canvasWidth, canvasHeight);\r\n\t\t\r\n\t\t//bars\r\n\t\tctx.fillStyle = \"red\";\r\n\t\tctx.save();\r\n\t\tctx.translate(360, MIDDLE_Y-100);\r\n\t\tfor(let b of audioData){\r\n\t\t\tlet percent = b/225;\r\n\t\t\tif(percent<.02) percent = .02;\r\n\t\t\tctx.translate(BAR_WIDTH, 0)\r\n\t\t\tctx.rotate(Math.PI * 2/32);\r\n\t\t\tctx.save();\r\n\t\t\tctx.scale(1,-1);\r\n\t\t\tctx.fillStyle = `rgb(${b}, ${b-128}, ${255-b})`;\r\n\t\t\tctx.fillRect(0,0,BAR_WIDTH, MAX_BAR_HEIGHT  * percent);\r\n\t\t\tctx.restore();\r\n\t\t\tctx.translate(PADDING,0);//space between bars\r\n\t\t}\r\n\t\tctx.restore();\r\n\r\n\t\t//line\r\n\t\tctx.save();\r\n\t\tctx.strokeStyle = \"white\";\r\n\t\tctx.lineWidth = 3;\r\n\t\tlet x = -(canvasWidth/audioData.length);\r\n\t\tlet y = MIDDLE_Y+180;\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(x, y);\r\n\t\tfor(let b of audioData){\r\n\t\t\tctx.lineTo(x,y-b);\r\n\t\t\tx += (canvasWidth/(audioData.length-10));\r\n\t\t}\r\n\t\tctx.stroke();\r\n\t\tctx.closePath();\r\n\t\tctx.restore();\r\n\r\n        for(let b of audioData){\r\n            ctx.save();\r\n            ctx.fillStyle = `rgb(${b}, ${b-128}, ${255-b})`;\r\n            circSprite.update();\r\n            circSprite.draw(ctx);\r\n            circSprite2.update();\r\n            circSprite2.draw(ctx);\r\n            ctx.restore();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport {setupCanvas,draw, drawArc};","/*\r\n\tmain.js is primarily responsible for hooking up the UI to the rest of the application \r\n\tand setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as audio from './audio';\r\nimport * as utils from './utils';\r\nimport * as canvas from './canvas';\r\nimport {DrawParams} from './interfaces/drawParams.interface'\r\n\r\nlet drawParams: DrawParams;\r\n\r\ndrawParams = {\r\n  showBars : false,\r\n  showCircles : false,\r\n  showNoise : false,\r\n  showInvert : false,\r\n  showEmboss : false\r\n};\r\n\r\n\r\n\r\nlet visualization = true;\r\nconst fps = 60;\r\n\r\n// 1 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n\tsound1  :  \"media/New Adventure Theme.mp3\"\r\n});\r\n\r\n\r\nconst loadJSON = (url: string, callback: { (e: any): void; (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>): any; }) => {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.onload = callback;\r\n  //xhr.onerror = e => console.log(`In onerror = HTTP Status Code = ${e.target.status}`);\r\n  xhr.open(\"GET\",url);\r\n  xhr.send();\r\n}\r\n\r\nconst JSONLoaded = (e) => {\r\n  //console.log(`In onload = HTTP Status Code = ${e.target.status}`);\r\n  const xml = e.target.responseText;\r\n  const json = JSON.parse(xml);\r\n  \r\n  //words1 = json.words1;\r\n\r\n  //drawParams.showGradient = json.uiInitialState.showGradient;\r\n  drawParams.showBars = json.uiInitialState.showBars;\r\n  drawParams.showCircles = json.uiInitialState.showCircles;\r\n  drawParams.showNoise = json.uiInitialState.showNoise;\r\n  drawParams.showInvert = json.uiInitialState.showInvert;\r\n  drawParams.showEmboss = json.uiInitialState.showEmboss;\r\n\r\n}\r\n\r\nconst init = () => {\r\n\tconsole.log(\"init called\");\r\n\tconsole.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n  audio.setupWebaudio(DEFAULTS.sound1);\r\n\tlet canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n\tcanvas.setupCanvas(canvasElement,audio.analyserNode);\r\n  \r\n\r\n  loadJSON(\"data/ac-data.json\", JSONLoaded);\r\n  setupUI(canvasElement);\r\n}\r\n\r\nconst setupUI = (canvasElement) => {\r\n  // A - hookup fullscreen button\r\n  const fsButton = document.querySelector(\"#fs-button\") as HTMLButtonElement;\r\n\r\n  //set the initial state of the high shelf checkbox\r\n  const cbHighshelf = document.querySelector('#cb-highshelf') as HTMLInputElement;\r\n  cbHighshelf.checked  = audio.highshelf  ; // `highshelf` is a boolean we will declare in a second\r\n\t\r\n  const cbLowshelf = document.querySelector('#cb-lowshelf') as HTMLInputElement;\r\n  cbLowshelf.checked = audio.lowshelf;\r\n\t\r\n  // add .onclick event to button\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n  const playButton = document.querySelector(\"#play-button\")  as HTMLButtonElement;\r\n\r\n  //onclick play button\r\n  playButton.onclick = e => {\r\n    console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n    //context suspended state?  \r\n    if(audio.audioCtx.state == \"suspended\"){\r\n      audio.audioCtx.resume();\r\n    }\r\n    console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n    if(playButton.dataset.playing == \"no\"){\r\n      //if paused play\r\n      audio.playCurrentSound();\r\n      playButton.dataset.playing = \"yes\"\r\n    //if paying, pause\r\n    }\r\n    else{\r\n      audio.pauseCurrentSound();\r\n      playButton.dataset.playing = \"no\"\r\n    }\r\n\r\n    //document.querySelector(\"#gradient-cb\").onclick = (e) => {drawParams.showGradient = e.target.checked;}\r\n\r\n    const cbBars = document.querySelector(\"#bars-cb\") as HTMLInputElement;\r\n    cbBars.onclick = (e) => {drawParams.showBars = cbBars.checked;}\r\n\r\n    const cbCircles = document.querySelector(\"#circles-cb\") as HTMLInputElement;\r\n    cbBars.onclick = (e) => {drawParams.showCircles = cbCircles.checked;}\r\n    \r\n    const cbNoise = document.querySelector(\"#noise-cb\") as HTMLInputElement;\r\n    cbNoise.onclick = (e) => {drawParams.showNoise = cbNoise.checked;}\r\n\r\n    const cbInvert = document.querySelector(\"#invert-cb\") as HTMLInputElement;\r\n    cbInvert.onclick = (e) => {drawParams.showInvert = cbInvert.checked;}\r\n\r\n    const cbEmboss = document.querySelector(\"#emboss-cb\") as HTMLInputElement;\r\n    cbEmboss.onclick = (e) => {drawParams.showEmboss = cbEmboss.checked;}\r\n\r\n    cbHighshelf.onclick = (e) => {audio.toggleHighshelf();};\r\n\r\n\t\tcbLowshelf.onclick = (e) => {audio.toggleLowshelf();};\r\n\r\n    audio.toggleHighshelf(); // when the app starts up, turn on or turn off the filter, depending on the value of `highshelf`!\r\n\t\taudio.toggleLowshelf();\r\n\r\n  };\r\n\r\n  //C - vol sider and label\r\n  let volumeSlider = document.querySelector(\"#volume-slider\") as HTMLInputElement;\r\n  let volumeLabel = document.querySelector(\"#volume-label\") as HTMLInputElement;\r\n\r\n  //add .oninput\r\n  volumeSlider.oninput = e => {\r\n    const target = e.target as HTMLInputElement\r\n    audio.setVolume(target.value);\r\n    //update label val to match sider\r\n    volumeLabel.innerHTML = String(Math.round((Number(target.value)/2 * 100)));\r\n  };\r\n\r\n  //set label to match initial sider val\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n\r\n  //D - hookup track <select>\r\n  const trackSelect= document.querySelector(\"#track-select\") as HTMLInputElement;\r\n  //add .onchange\r\n  trackSelect.onchange = e => {\r\n    audio.loadSoundFile(trackSelect.value);\r\n    //puase the current track if playing\r\n    if(playButton.dataset.playing == \"yes\"){\r\n      playButton.dispatchEvent (new MouseEvent(\"click\"));\r\n    }\r\n  };\r\n\r\n  const visualSelect= document.querySelector(\"#visual-select\") as HTMLInputElement;\r\n  //add .onchange\r\n  visualSelect.onchange = e => {\r\n    visualization = !visualization;\r\n    console.log(visualization);\r\n  };\r\n\r\n  \r\n  \r\n  loop();\r\n} // end setupUI\r\n\r\nconst loop = () => {\r\n  // /* NOTE: This is temporary testing code that we will delete in Part II */\r\n  setTimeout(loop, 1000/fps);\r\n\r\n\r\n  canvas.draw(drawParams);\r\n}\r\n\r\n\r\nexport {init, visualization};","import * as main from \"./main\";\r\n\r\nwindow.onload = ()=>{\r\n\tconsole.log(\"window.onload called\");\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\t\r\n\t// 2 - start up app\r\n\tmain.init();\r\n}"],"names":["DEFAULTS","audioCtx","biquadFilter","lowShelfBiquadFilter","sourceNode","analyserNode","gainNode","toggleHighshelf","document","querySelector","checked","frequency","setValueAtTime","currentTime","gain","toggleLowshelf","loadSoundFile","filePath","src","makeColor","red","green","blue","alpha","getRandom","min","max","Math","random","x","y","range","this","radius","startAngle","endAngle","PI","update","xDraw","yDraw","draw","ctx","color","String","type","canvasWidth","canvasHeight","audioData","MIDDLE_Y","drawParams","drawArc","fillStyle","lineWidth","strokeStyle","save","beginPath","arc","fill","stroke","closePath","restore","circSprite","CircleSprite","circSprite2","showBars","showCircles","showNoise","showInvert","showEmboss","visualization","Object","freeze","sound1","JSONLoaded","e","xml","target","responseText","json","JSON","parse","uiInitialState","setupUI","canvasElement","fsButton","cbHighshelf","cbLowshelf","onclick","element","console","log","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","playButton","state","resume","dataset","playing","play","pause","cbBars","cbCircles","cbNoise","cbInvert","cbEmboss","volumeSlider","volumeLabel","oninput","value","Number","innerHTML","round","dispatchEvent","Event","trackSelect","onchange","MouseEvent","loop","setTimeout","params","getByteFrequencyData","globalAlpha","fillRect","barWidth","length","margin","i","topSpacing","strokeRect","maxRadius","percent","circleRadius","imageData","getImageData","data","width","putImageData","b","translate","rotate","scale","moveTo","lineTo","window","onload","getByte","AudioContext","Audio","createMediaElementSource","createBiquadFilter","createAnalyser","fftSize","numSamples","createGain","connect","destination","callback","xhr","analyserNodeRef","getContext","height","Uint8Array","XMLHttpRequest","open","send"],"sourceRoot":""}